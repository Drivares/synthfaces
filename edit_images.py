"""Tool to edit images generated by conditional StyleGANs."""

import os
import re
from typing import List, Optional, Tuple, Union

import click
import numpy as np
import torch

from stylegan3.core import dnnlib
from stylegan3.core import legacy
from stylegan3.core.gen_utils import classes2label, gen_image_from_z, gen_image_from_ws, calc_latent_edit, save_image

#----------------------------------------------------------------------------

def parse_range(s: Union[str, List]) -> List[int]:
    '''Parse a comma separated list of numbers or ranges and return a list of ints.

    Example: '1,2,5-10' returns [1, 2, 5, 6, 7, 8, 9, 10]
    '''
    if isinstance(s, list): return s
    ranges = []
    range_re = re.compile(r'^(\d+)-(\d+)$')
    for p in s.split(','):
        m = range_re.match(p)
        if m:
            ranges.extend(range(int(m.group(1)), int(m.group(2))+1))
        else:
            ranges.append(int(p))
    return ranges

#----------------------------------------------------------------------------

def parse_vec2(s: Union[str, Tuple[float, float]]) -> Tuple[float, float]:
    '''Parse a floating point 2-vector of syntax 'a,b'.

    Example:
        '0,1' returns (0,1)
    '''
    if isinstance(s, tuple): return s
    parts = s.split(',')
    if len(parts) == 2:
        return (float(parts[0]), float(parts[1]))
    raise ValueError(f'cannot parse 2-vector {s}')

#----------------------------------------------------------------------------

@click.command()
@click.option('--network', 'network_pkl', help='Network pickle filename', required=True)
@click.option('--seeds', type=parse_range, help='List of random seeds (e.g., \'0,1,4-6\')', required=True)
@click.option('--trunc', 'truncation_psi', type=float, help='Truncation psi', default=1, show_default=True)
@click.option('--noise-mode', help='Noise mode', type=click.Choice(['const', 'random', 'none']), default='const', show_default=True)
@click.option('--translate', help='Translate XY-coordinate (e.g. \'0.3,1\')', type=parse_vec2, default='0,0', show_default=True, metavar='VEC2')
@click.option('--rotate', help='Rotation angle in degrees', type=float, default=0, show_default=True, metavar='ANGLE')
@click.option('--source-classes', 'source_classes', type=parse_range, help='Source class', required=True)
@click.option('--target-classes', 'target_classes', type=parse_range, help='Target class', required=True)
@click.option('--mode',  help='Edit mode', type=click.Choice(['class', 'latent']), default='latent', show_default=True)
@click.option('--alpha',  help='Latent editing parameter', type=float, default=None)
@click.option('--outdir', help='Where to save the output images', type=str, required=True, metavar='DIR')
def edit_images(
    network_pkl: str,
    seeds: List[int],
    truncation_psi: float,
    noise_mode: str,
    translate: Tuple[float,float],
    rotate: float,
    source_classes: List[float],
    target_classes: List[float],
    mode: str,
    alpha: Optional[float],
    outdir: str,
):
    """Tool to edit images generated by conditional StyleGANs."""

    print('Loading networks from "%s"...' % network_pkl)
    device = torch.device('cuda')
    with dnnlib.util.open_url(network_pkl) as f:
        G = legacy.load_network_pkl(f)['G_ema'].to(device) # type: ignore

    os.makedirs(outdir, exist_ok=True)

    if G.c_dim == 0:
        raise Exception('Network is unconditional')
    if G.mapping.num_classes is None:
        raise Exception('Condition is not class based')

    source_c = torch.tensor(classes2label(source_classes, G.mapping.num_classes), device=device).unsqueeze(0)
    target_c = torch.tensor(classes2label(target_classes, G.mapping.num_classes), device=device).unsqueeze(0)

    # Generate images.
    for seed_idx, seed in enumerate(seeds):
        print('Generating edit for seed %d (%d/%d) ...' % (seed, seed_idx, len(seeds)))
                
        z = torch.from_numpy(np.random.RandomState(seed).randn(1, G.z_dim)).to(device)
        
        # Generate source image
        img = gen_image_from_z(G, z, source_c, translate, rotate)
        img = (img.permute(0, 2, 3, 1) * 127.5 + 128).clamp(0, 255).to(torch.uint8)
        save_image(img[0].cpu().numpy(), os.path.join(outdir, f'seed{seed:04d}_s.png'))

        # Generate target image
        if mode == 'class':
            img = gen_image_from_z(G, z, target_c, truncation_psi, noise_mode, translate, rotate)
        elif mode == 'latent':
            ws = G.mapping(z, source_c, truncation_psi=truncation_psi)
            edited_ws = calc_latent_edit(G, ws, source_c, target_c, alpha)
            img = gen_image_from_ws(G, edited_ws, noise_mode, translate, rotate)
        img = (img.permute(0, 2, 3, 1) * 127.5 + 128).clamp(0, 255).to(torch.uint8)
        save_image(img[0].cpu().numpy(), os.path.join(outdir, f'seed{seed:04d}_t.png'))

#----------------------------------------------------------------------------

if __name__ == "__main__":
    edit_images()
